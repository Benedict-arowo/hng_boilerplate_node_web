openapi: 3.0.3
info:
  title: "Team Nature's Swagger API - OpenAPI 3.0"
  description: |-
    This is a boilerplate for an Organisation API based on the OpenAPI 3.0 specification.  You can find out more about
    the project at our [github page](https://github.com/Benedict-arowo/hng_boilerplate_node_web/tree/team-nature?tab=readme-ov-file).
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 1.0.11
servers:
  - url: https://example.com/api
paths:
  "/waitlist":
    post:
      tags:
        - Waitlist
      summary: "Create a new waitlist entry"
      requestBody:
        description: "Adds an email to the waitlist"
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "winalong@teamnatureswag.com"
        required: true
      responses:
        "201":
          description: "Waitlist entry added successfully"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entry added successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
                      created_at:
                        type: string
                        format: date-time
        "400":
          description: "Invalid request data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "Email already exists in the waitlist"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Email already exists in the waitlist"
    get:
      tags:
        - Waitlist
      summary: "Retrieve waitlist entries paginated"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: "Page number"
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: "Number of entries per page"
      responses:
        "200":
          description: "Waitlist entries retrieved successfully"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entries retrieved successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                          format: email
                        created_at:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_entries:
                        type: integer
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/waitlist/{id}":
    put:
      tags:
        - Waitlist
      summary: "Update a waitlist entry"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the waitlist entry"
      requestBody:
        description: "Updates the email of a waitlist entry"
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "newemail@natureteamswag.com"
        required: true
      responses:
        "200":
          description: "Waitlist entry updated successfully"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entry updated successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        "400":
          description: "Invalid request data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Waitlist entry not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entry not found"
    delete:
      tags:
        - Waitlist
      summary: "Delete a waitlist entry"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the waitlist entry"
      responses:
        "200":
          description: "Waitlist entry deleted successfully"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entry deleted successfully"
        "404":
          description: "Waitlist entry not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Waitlist entry not found"
components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        organisation:
          $ref: "#/components/schemas/userOrganisations"
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Authentication:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        provider:
          type: string
        providerId:
          type: string
          format: uuid
        token:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BlogPosts:
      type: object
      properties:
        id:
          type: string
          format: uuid
        authorId:
          type: string
          format: uuid
        author:
          $ref: "#/components/schemas/User"
        title:
          type: string
        content:
          type: string
        tags:
          type: string

    contactMessages:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        message:
          type: string

    Logs:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/User/properties/id"
            name:
              $ref: "#/components/schemas/User/properties/name"
            email:
              $ref: "#/components/schemas/User/properties/email"
        action:
          type: string
        timestamp:
          type: string
          format: date-time

    Notifications:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/User/properties/id"
            name:
              $ref: "#/components/schemas/User/properties/name"
            email:
              $ref: "#/components/schemas/User/properties/email"
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Organisations:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        owner:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/User/properties/id"
            name:
              $ref: "#/components/schemas/User/properties/name"
            email:
              $ref: "#/components/schemas/User/properties/email"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Payments:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/User/properties/id"
            name:
              $ref: "#/components/schemas/User/properties/name"
            email:
              $ref: "#/components/schemas/User/properties/email"
        orgId:
          type: string
          format: uuid
          nullable: true
        amount:
          type: number
          format: float
        currency:
          type: string
        provider:
          type: string
        providerId:
          type: string
          format: uuid
        invoice:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Settings:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/User/properties/id"
            name:
              $ref: "#/components/schemas/User/properties/name"
            email:
              $ref: "#/components/schemas/User/properties/email"
        key:
          type: string
        value:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Waitlists:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        createdAt:
          type: string
          format: date-time

    userOrganisations:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        orgId:
          type: string
          format: uuid
        role:
          type: string
          enum: [admin, member]

    EmailLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        templateId:
          type: string
        status:
          type: string
          enum: [sent, failed, pending]
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - templateId
        - status

    EmailTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subject:
          type: string
        body:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - subject
        - body

    Integration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        service:
          type: string
        apiKey:
          type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - service
        - apiKey
        - userId

    AI:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        inputData:
          type: string
        responseData:
          type: string
        service:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - userId
        - inputData
        - responseData

    Invitation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        email:
          type: string
        accepted:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - email

    validationError:
      type: object
      properties:
        status:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
